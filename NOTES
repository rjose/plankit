NOTES
=====

Feb 11, 2017
------------

>> Sat Feb 11 18:50:42 PST 2017
Let's start by creating all of the files that I've identified. Then, I want to
create some structures so I can create the globals. I'll add these to the
Makefile and get everything to build.


>> Sat Feb 11 19:12:09 PST 2017
I should use flex to parse numbers and strings. We can return a character to
indicate what type was returned.


>> Sat Feb 11 19:40:59 PST 2017
OK, let's create empty versions of all the files...Done!


>> Sat Feb 11 19:46:04 PST 2017
OK, let's create a get_word routine. I think we should leverage the lexer here
and include the type info as well as the word.


>> Sat Feb 11 19:59:04 PST 2017
OK, I have the get_token subroutine working. Let's distinguish between an int,
a double, and a word. After that, I think we should handle the search for a
word in the dictionary. Maybe we can do the search tomorrow.


>> Sat Feb 11 20:14:49 PST 2017
Let's take a break for today and then return by adding some functionality to
the dictionary.


Feb 12, 2017
------------

>> Sun Feb 12 07:44:23 PST 2017
Let's start by adding functionality to the dictionary. We need to create
the dictionary and search it.


>> Sun Feb 12 08:16:33 PST 2017
OK, we can build and free a dictionary. Let's take a break and then add
search to it. Once that's done, we can hook into an error routine.


>> Sun Feb 12 08:44:04 PST 2017
Let's add search and an error routine.


>> Sun Feb 12 08:58:59 PST 2017
OK, let's implement the push_param (at least the frame of it) and do some
error handling.


>> Sun Feb 12 09:04:01 PST 2017
Alright, I'm ready to add the setjmp and longjmp. Let's see how this works.


>> Sun Feb 12 09:27:49 PST 2017
Have error handling! Let's check in and then take a break. After the break, I'll
figure out a documentation style for this.


>> Sun Feb 12 11:23:55 PST 2017
Let's work out a documentation style and then apply it to all of our files.


<< (40 min) Sun Feb 12 12:03:16 PST 2017
Let's check in and then take a break. I think I've figured out a comment style
that works. I wonder what happens if we add doxygen comments to the inside
of a function?


>> Sun Feb 12 12:51:30 PST 2017
Let's add some basic documentation to each of our files.


>> Sun Feb 12 15:15:53 PST 2017
Let's add a simple word that can print a message


>> Sun Feb 12 15:30:33 PST 2017
OK, we can execute a simple word. Let's take a break and then free our
dictionary entries next. After that, let's see if we can push a param
onto the stack.


>> Sun Feb 12 17:40:08 PST 2017
Let's free the dictionary entries next.


>> Sun Feb 12 17:45:13 PST 2017
OK, let's document the entry functions.


>> Sun Feb 12 17:49:11 PST 2017
Next, let's create a constant. There's a bunch of things we need to do here. One
is pushing a parameter onto the stack. Let's do that first and then take a break.


(3 min) Sun Feb 12 17:52:19 PST 2017
We need to get a stack into place and initialize it. I guess we should use a deque?


<< (53) Sun Feb 12 18:45:13 PST 2017
Can push a parameter onto the stack. Let's check in and then take a break.



>> Sun Feb 12 21:23:35 PST 2017
Let's create a constant entry next. We'll start by creating a function that
can push its first paramter onto the stack.


Feb 13, 2017
------------


>> Mon Feb 13 18:16:25 PST 2017
Let's document the new functions related to constant.


(12 min) Mon Feb 13 18:28:16 PST 2017
I documented the new functions. I'd like to document the files now. Let's see
if I can figure out the format for this.


<< (46 min) Mon Feb 13 19:02:27 PST 2017
Let's take a break and then swing back and document dictionary.c, globals.c, stack.c.


Mon Feb 13 19:49:39 PST 2017
OK, I finished documenting the rest of the files. Let's take a break and then
add the printing of the stack.



>> Mon Feb 13 20:56:52 PST 2017
Let's add a word to print the stack. We'll call it .p


<< (22 min) Mon Feb 13 21:18:39 PST 2017
Got this working. Tomorrow, we'll add a definition. There'll be more steps
in that.


Feb 14, 2017
------------


>> Tue Feb 14 17:44:00 PST 2017
Let's create a simple definition. It will just have words that are already
entries.


- [X] Add routine to Param
- [X] Add execute routine to define_entry->params
- [X] Add an immediate flag
- [X] Add compiling of a simple entry
- [X] Define ';' 
- [X] Add compile code
- [ ] Define EC_execute


Feb 15, 2017
------------

>> Wed Feb 15 18:33:53 PST 2017
Let's add a word to print a definition.


>> Wed Feb 15 22:04:17 PST 2017
The return stack should be pointers to parameters


Feb 16, 2017
------------
Let's get execution working and then clean up print_param.

The return stack should consist of pointers to params. It should only be used
for that purpose.

We should use a GSequence for the parameters in an entry since it allows us
to specify offsets from them.

Let's stash save our current changes and then make this change.


>> Thu Feb 16 20:28:31 PST 2017
Let's get everything running again and then finish the execute function.


<< (18 min) Thu Feb 16 20:46:55 PST 2017
OK, got it running again. Let's take a break and then finish the EC_execute
function.


>> Thu Feb 16 22:06:20 PST 2017
OK, got compile to work, but I'm double freeing something. I'll check tomorrow.


Feb 17, 2017
------------
Let's scrub through our documentation of stacks to make sure our memory
management is OK.

allheads.h
globals.h
globals.c

param.h
param.c

entry.h
entry.c

stack.h
return_stack.h
return_stack.c
stack.c

dictionary.h
dictionary.c

ec_basic.h
ec_basic.c


main.c


>> Fri Feb 17 23:03:29 PST 2017
We can execute a simple definition. Tomorrow, we'll create variables.


Feb 18, 2017
------------
Let's add variables next.

OK, can create a variable. Let's add the associated variable words.

I added the code to clear the stacks on error.


>> Sat Feb 18 09:33:27 PST 2017
OK, let's add words to store and fetch variables.


>> Sat Feb 18 10:51:07 PST 2017
Let's handle underflow in the parameter stack.
